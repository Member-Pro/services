// <auto-generated />
using System;
using System.Collections.Generic;
using MemberPro.Core.Data.Implementations;
using MemberPro.Core.Entities.Achievements;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MemberPro.Core.Data.Migrations
{
    [DbContext(typeof(MemberProDbContext))]
    [Migration("20210820051748_AddMemberRoles")]
    partial class AddMemberRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_filename");

                    b.Property<string>("InfoUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("info_url");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_achievement");

                    b.ToTable("achievement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.AchievementActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("activity_date");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comments");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("integer")
                        .HasColumnName("component_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<decimal?>("QuantityCompleted")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity_completed");

                    b.HasKey("Id")
                        .HasName("pk_achievement_activity");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_achievement_activity_achievement_id");

                    b.HasIndex("ComponentId")
                        .HasDatabaseName("ix_achievement_activity_component_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_achievement_activity_member_id");

                    b.ToTable("achievement_activity");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.AchievementComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_achievement_component");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_achievement_component_achievement_id");

                    b.ToTable("achievement_component");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.MemberRequirementState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Dictionary<string, object>>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_member_requirement_state");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_requirement_state_member_id");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_member_requirement_state_requirement_id");

                    b.ToTable("member_requirement_state");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer")
                        .HasColumnName("component_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<decimal?>("MaxCount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_count");

                    b.Property<decimal?>("MinCount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<RequirementValidationParameter[]>("ValidationParameters")
                        .HasColumnType("jsonb")
                        .HasColumnName("validation_parameters");

                    b.Property<string>("ValidatorTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("validator_type_name");

                    b.HasKey("Id")
                        .HasName("pk_requirement");

                    b.HasIndex("ComponentId")
                        .HasDatabaseName("ix_requirement_component_id");

                    b.ToTable("requirement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_division");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_division_region_id");

                    b.ToTable("division");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.ToTable("region");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_state_province");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_state_province_country_id");

                    b.ToTable("state_province");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Media.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("numeric")
                        .HasColumnName("file_size");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("media_type");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("object_type");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_attachment");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_attachment_owner_id");

                    b.ToTable("attachment");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("field_type");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("ValueOptions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("value_options");

                    b.HasKey("Id")
                        .HasName("pk_custom_field");

                    b.ToTable("custom_field");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.FavoriteAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.HasKey("Id")
                        .HasName("pk_favorite_achievement");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_favorite_achievement_achievement_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_favorite_achievement_member_id");

                    b.ToTable("favorite_achievement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address2");

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("biography");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Interests")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("interests");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("joined_on");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<bool>("ShowInDirectory")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_directory");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("integer")
                        .HasColumnName("state_province_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_member");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_member_country_id");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("ix_member_division_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_member_region_id");

                    b.HasIndex("StateProvinceId")
                        .HasDatabaseName("ix_member_state_province_id");

                    b.ToTable("member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int>("CreatedByMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_member_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("DisplayPublicly")
                        .HasColumnType("boolean")
                        .HasColumnName("display_publicly");

                    b.Property<DateTime>("EarnedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("earned_on");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.HasKey("Id")
                        .HasName("pk_member_achievement");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_member_achievement_achievement_id");

                    b.HasIndex("CreatedByMemberId")
                        .HasDatabaseName("ix_member_achievement_created_by_member_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_achievement_member_id");

                    b.ToTable("member_achievement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberAchievementProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.HasKey("Id")
                        .HasName("pk_member_achievement_progress");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_member_achievement_progress_achievement_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_achievement_progress_member_id");

                    b.ToTable("member_achievement_progress");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberCustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_member_custom_field_value");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("ix_member_custom_field_value_field_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_custom_field_value_member_id");

                    b.ToTable("member_custom_field_value");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberRenewal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("paid_amount");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("pk_member_renewal");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_renewal_member_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_member_renewal_plan_id");

                    b.ToTable("member_renewal");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("added_on");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_member_role");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_member_role_member_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_member_role_role_id");

                    b.ToTable("member_role");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Plans.MembershipPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AvailableEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("available_end_date");

                    b.Property<DateTime>("AvailableStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("available_start_date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_months");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("price");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_membership_plan");

                    b.ToTable("membership_plan");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.AchievementActivity", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_achievement_activity_achievement_achievement_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Achievements.AchievementComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("fk_achievement_activity_achievement_component_component_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_achievement_activity_member_member_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Component");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.AchievementComponent", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.Achievement", "Achievement")
                        .WithMany("Components")
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_achievement_component_achievement_achievement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.MemberRequirementState", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_requirement_state_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Achievements.Requirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .HasConstraintName("fk_member_requirement_state_requirement_requirement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.Requirement", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.AchievementComponent", "Component")
                        .WithMany("Requirements")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("fk_requirement_achievement_component_component_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Division", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Geography.Region", "Region")
                        .WithMany("Divisions")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_division_region_region_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.StateProvince", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Geography.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_state_province_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Media.Attachment", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_attachment_member_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.FavoriteAchievement", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_favorite_achievement_achievement_achievement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_favorite_achievement_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.Member", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Geography.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_member_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Geography.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_member_division_division_id");

                    b.HasOne("MemberPro.Core.Entities.Geography.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_member_region_region_id");

                    b.HasOne("MemberPro.Core.Entities.Geography.StateProvince", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId")
                        .HasConstraintName("fk_member_state_province_state_province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Division");

                    b.Navigation("Region");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberAchievement", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_member_achievement_achievement_achievement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "CreatedByMember")
                        .WithMany()
                        .HasForeignKey("CreatedByMemberId")
                        .HasConstraintName("fk_member_achievement_member_created_by_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany("Achievements")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_achievement_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("CreatedByMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberAchievementProgress", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Achievements.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_member_achievement_progress_achievement_achievement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany("AchievementProgressRecords")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_achievement_progress_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberCustomFieldValue", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Members.CustomField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .HasConstraintName("fk_member_custom_field_value_custom_field_field_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany("FieldValues")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_custom_field_value_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberRenewal", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany("Renewals")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_renewal_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Plans.MembershipPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .HasConstraintName("fk_member_renewal_membership_plan_plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.MemberRole", b =>
                {
                    b.HasOne("MemberPro.Core.Entities.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_role_member_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberPro.Core.Entities.Members.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_member_role_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.Achievement", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Achievements.AchievementComponent", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Country", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Geography.Region", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("MemberPro.Core.Entities.Members.Member", b =>
                {
                    b.Navigation("AchievementProgressRecords");

                    b.Navigation("Achievements");

                    b.Navigation("FieldValues");

                    b.Navigation("Renewals");
                });
#pragma warning restore 612, 618
        }
    }
}
